
import type { FormField, AdminConfig } from './types';
import { TASK_STATUSES } from './constants';
import { 
    FileText, 
    Type, 
    ListTodo, 
    GitMerge, 
    Link2, 
    Paperclip, 
    Users, 
    Bug, 
    GitPullRequest,
    Cloud, 
    Calendar,
    StickyNote,
    Tags
} from 'lucide-react';

export const ICONS = {
    text: Type,
    textarea: FileText,
    select: ListTodo,
    multiselect: GitMerge,
    attachments: Paperclip,
    users: Users,
    bug: Bug,
    pr: GitPullRequest,
    deployment: Cloud,
    date: Calendar,
    comments: StickyNote,
    tags: Tags
};

export const MASTER_FORM_FIELDS: Record<string, FormField> = {
    title: {
        id: 'title',
        label: 'Title',
        type: 'text',
        placeholder: 'E.g. Fix login button',
        description: 'A short, descriptive title for the task.',
        defaultValue: '',
        icon: 'text',
        group: 'Core Details',
    },
    description: {
        id: 'description',
        label: 'Description',
        type: 'textarea',
        placeholder: 'Describe the task in detail...',
        description: 'Provide a thorough description of what needs to be done.',
        defaultValue: '',
        icon: 'textarea',
        group: 'Core Details',
    },
    status: {
        id: 'status',
        label: 'Status',
        type: 'select',
        options: [...TASK_STATUSES],
        placeholder: 'Select a status',
        description: 'The current status of the task.',
        defaultValue: 'To Do',
        icon: 'select',
        group: 'Core Details',
    },
    repositories: {
        id: 'repositories',
        label: 'Repositories',
        type: 'multiselect',
        options: ['UI-Dashboard', 'UI-Admin', 'Templates', 'API-Export', 'Other'],
        placeholder: 'Select repositories...',
        description: 'Select all applicable repositories for this task.',
        defaultValue: ['UI-Dashboard'],
        icon: 'multiselect',
        group: 'Assignment & Tracking',
    },
    developers: {
        id: 'developers',
        label: 'Developers',
        type: 'multiselect',
        placeholder: 'Select or create developers...',
        description: 'Assign developers to this task. Type a new name and press Enter to add.',
        defaultValue: [],
        icon: 'users',
        group: 'Assignment & Tracking',
    },
    azureWorkItemId: {
        id: 'azureWorkItemId',
        label: 'Azure Work Item ID',
        type: 'text',
        placeholder: 'e.g. 101',
        description: 'The associated Azure DevOps work item ID.',
        defaultValue: '',
        icon: 'link',
        group: 'Assignment & Tracking',
    },
    qaIssueIds: {
        id: 'qaIssueIds',
        label: 'QA Issue IDs',
        type: 'text',
        placeholder: 'e.g. T118-1, T118-2',
        description: 'Comma-separated issue IDs from the QA process.',
        defaultValue: '',
        icon: 'bug',
        group: 'Advanced',
    },
    attachments: {
        id: 'attachments',
        label: 'Attachments',
        type: 'attachments',
        description: 'Add relevant links or files.',
        defaultValue: [],
        icon: 'attachments',
        group: 'Advanced',
    },
    devStartDate: {
        id: 'devStartDate',
        label: 'Development Start',
        type: 'date',
        placeholder: 'Pick a date',
        description: 'The start date for development work.',
        defaultValue: undefined,
        icon: 'date',
        group: 'Dates',
    },
    devEndDate: {
        id: 'devEndDate',
        label: 'Development End',
        type: 'date',
        placeholder: 'Pick a date',
        description: 'The end date for development work.',
        disablePastDatesFrom: 'devStartDate',
        defaultValue: undefined,
        icon: 'date',
        group: 'Dates',
    },
    qaStartDate: {
        id: 'qaStartDate',
        label: 'QA Start',
        type: 'date',
        placeholder: 'Pick a date',
        description: 'The start date for QA testing.',
        defaultValue: undefined,
        icon: 'date',
        group: 'Dates',
    },
    qaEndDate: {
        id: 'qaEndDate',
        label: 'QA End',
        type: 'date',
        placeholder: 'Pick a date',
        description: 'The end date for QA testing.',
        disablePastDatesFrom: 'qaStartDate',
        defaultValue: undefined,
        icon: 'date',
        group: 'Dates',
    },
    stageDate: {
        id: 'stageDate',
        label: 'Stage Updated Date',
        type: 'date',
        placeholder: 'Pick a date',
        description: 'Date the task was deployed to staging.',
        defaultValue: undefined,
        icon: 'date',
        group: 'Dates',
    },
    productionDate: {
        id: 'productionDate',
        label: 'Production Updated Date',
        type: 'date',
        placeholder: 'Pick a date',
        description: 'Date the task was deployed to production.',
        defaultValue: undefined,
        icon: 'date',
        group: 'Dates',
    },
    othersDate: {
        id: 'othersDate',
        label: 'Others Updated Date',
        type: 'date',
        placeholder: 'Pick a date',
        description: 'Date the task was deployed to another environment.',
        defaultValue: undefined,
        icon: 'date',
        group: 'Dates',
    },
    deploymentStatus: {
        id: 'deploymentStatus',
        label: 'Deployment Status',
        type: 'deployment',
        description: 'Track deployment across different environments.',
        defaultValue: { dev: false, stage: false, production: false, others: false },
        icon: 'deployment',
        group: 'Advanced',
    },
    prLinks: {
        id: 'prLinks',
        label: 'Pull Request Links',
        type: 'pr-links',
        description: 'Add PR numbers for each repository and environment.',
        defaultValue: {},
        icon: 'pr',
        group: 'Assignment & Tracking',
    }
};


export const DEFAULT_ADMIN_CONFIG: AdminConfig = {
    formLayout: ['title', 'description', 'status'],
    fieldConfig: Object.keys(MASTER_FORM_FIELDS).reduce((acc, key) => {
        acc[key] = {
            visible: ['title', 'description', 'status'].includes(key),
            required: ['title', 'description', 'status'].includes(key),
        };
        return acc;
    }, {} as Record<string, { visible: boolean; required: boolean; }>),
    groupOrder: [
        'Core Details',
        'Assignment & Tracking',
        'Dates',
        'Advanced',
        'Tagging',
        'Custom Fields',
    ],
}
